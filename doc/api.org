
** Scenarios

Case 1

- User register
- User confirm from email
- User login
- User book a role
- User book another role
- User unbook a role
- User change date and book a role

Case 2

- User request to reset password
- User confirm from email
- User reset password

Case 3

- Visitors see all the booking info
- Visitors change date

Case 4

** Cases

*** User register

#+BEGIN_SRC 
mutation {
  register(person: {name: "owen", password: "pwd", email:"owen@1.com"})
}

// Expected result:
{
  "data": {
    "register": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBdXRoRXhwaXJ5RGF0ZVRpbWUiOiIyMDE5LTA1LTEyVDIxOjUyOjUyLjY4NDA5OSswODowMCIsIm5hbWUiOiJvd2VuIn0.f5aStzmRd_GRQjk-XHbJSQr225YpZDhvfcSwYSj473A"
  }
}
#+END_SRC

*** User login

#+BEGIN_SRC 
{
  login(user: "owen", password: "pwd")
}

// Expected result
{
  "data": {
    "login": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBdXRoRXhwaXJ5RGF0ZVRpbWUiOiIyMDE5LTA1LTEyVDIyOjA0OjMzLjUwNjAzKzA4OjAwIiwibmFtZSI6Im93ZW4ifQ.2gyR1U1sonXtr9qS_KJCp8kbUpw3D65XcYoa0OZu3ZU"
  }
}
#+END_SRC

*** Book a role

#+BEGIN_SRC 
mutation {
  book(date: "2019-03-11T00:00:00Z", role: Speaker, title: "Hey buddy") {
    date
    agenda {
      role
      title
      duration
      member{
        name
        mobile
        email
        id
      }
    }
  }
}
#+END_SRC

*** Get meeting

#+BEGIN_SRC 
{
  meetings {
    id
    agenda {
      role
    }
    date
  }
}

// Result

{
  "data": {
    "meetings": [
      {
        "id": "5cb363d879b9d79d729dd9f4",
        "agenda": [
          {
            "role": "Speaker"
          }
        ],
        "date": "2019-03-11T08:00:00+08:00"
      }
    ]
  }
}
#+END_SRC

** Ideas

Q: How we do auth in pure GraphQL
A: Refer https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb
We are using the third way: pure GraphQL.
User register and user login will both return a jwt token. The client can save locally.
The jwt token should include:
- Expiration time
- email
- name
Every endpoint requiring auth requires the user to input token.

